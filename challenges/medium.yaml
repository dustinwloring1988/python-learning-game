- title: Factorial
  difficulty: medium
  description: "Write a function called 'factorial' that returns the factorial of `n`."
  example: "Example: factorial(5) should return 120."
  template: "def factorial(n):\n    # Write your code here\n    pass\n"
  solution: "def factorial(n):\n    if n == 0:\n        return 0\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"
  tests:
    - input: 'factorial(5)'
      expected: 120
    - input: 'factorial(3)'
      expected: 6
    - input: 'factorial(0)'
      expected: 1

- title: Fibonacci
  difficulty: medium
  description: "Write a function called 'fibonacci' that returns the `n`th Fibonacci number."
  example: "Example: fibonacci(5) should return 5."
  template: "def fibonacci(n):\n    # Write your code here\n    pass\n"
  solution: "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n"
  tests:
    - input: 'fibonacci(5)'
      expected: 5
    - input: 'fibonacci(10)'
      expected: 55
    - input: 'fibonacci(0)'
      expected: 0

- title: Reverse String
  difficulty: medium
  description: "Write a function called 'reverse_string' that returns the reverse of the input string `s`."
  example: "Example: reverse_string('hello') should return 'olleh'."
  template: "def reverse_string(s):\n    # Write your code here\n    pass\n"
  solution: "def reverse_string(s):\n    return s[::-1]\n"
  tests:
    - input: 'reverse_string("hello")'
      expected: 'olleh'
    - input: 'reverse_string("world")'
      expected: 'dlrow'
    - input: 'reverse_string("")'
      expected: ''

- title: Palindrome Check
  difficulty: medium
  description: "Write a function called 'is_palindrome' that checks if a given string `s` is a palindrome."
  example: "Example: is_palindrome('racecar') should return True."
  template: "def is_palindrome(s):\n    # Write your code here\n    pass\n"
  solution: "def is_palindrome(s):\n    return s == s[::-1]\n"
  tests:
    - input: 'is_palindrome("racecar")'
      expected: True
    - input: 'is_palindrome("hello")'
      expected: False
    - input: 'is_palindrome("a")'
      expected: True

- title: FizzBuzz
  difficulty: medium
  description: "Write a function called 'fizzbuzz' that prints numbers from 1 to `n`. But for multiples of three print 'Fizz' instead of the number and for the multiples of five print 'Buzz'. For numbers which are multiples of both three and five print 'FizzBuzz'."
  example: "Example: fizzbuzz(15) should print the sequence up to 15."
  template: "def fizzbuzz(n):\n    # Write your code here\n    pass\n"
  solution: |
    def fizzbuzz(n):
        result = []
        for i in range(1, n+1):
            if i % 3 == 0 and i % 5 == 0:
                result.append("FizzBuzz")
            elif i % 3 == 0:
                result.append("Fizz")
            elif i % 5 == 0:
                result.append("Buzz")
            else:
                result.append(str(i))
        return result
  tests:
    - input: 'fizzbuzz(15)'
      expected: ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']
    - input: 'fizzbuzz(5)'
      expected: ['1', '2', 'Fizz', '4', 'Buzz']
    - input: 'fizzbuzz(3)'
      expected: ['1', '2', 'Fizz']

- title: Fibonacci Sequence
  difficulty: medium
  description: "Write a function called 'fibonacci' that returns the first `n` numbers in the Fibonacci sequence."
  example: "Example: fibonacci(5) should return [0, 1, 1, 2, 3]."
  template: "def fibonacci(n):\n    # Write your code here\n    pass\n"
  solution: |
    def fibonacci(n):
        fib_sequence = [0, 1]
        for i in range(2, n):
            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
        return fib_sequence[:n]
  tests:
    - input: 'fibonacci(5)'
      expected: [0, 1, 1, 2, 3]
    - input: 'fibonacci(1)'
      expected: [0]
    - input: 'fibonacci(0)'
      expected: []

- title: Factorial
  difficulty: medium
  description: "Write a function called 'factorial' that returns the factorial of a given number `n`."
  example: "Example: factorial(5) should return 120."
  template: "def factorial(n):\n    # Write your code here\n    pass\n"
  solution: |
    def factorial(n):
        if n == 0:
            return 1
        return n * factorial(n - 1)
  tests:
    - input: 'factorial(5)'
      expected: 120
    - input: 'factorial(0)'
      expected: 1
    - input: 'factorial(3)'
      expected: 6

- title: Count Vowels
  difficulty: medium
  description: "Write a function called 'count_vowels' that returns the number of vowels in a given string `s`."
  example: "Example: count_vowels('hello') should return 2."
  template: "def count_vowels(s):\n    # Write your code here\n    pass\n"
  solution: |
    def count_vowels(s):
        vowels = "aeiouAEIOU"
        return sum(1 for char in s if char in vowels)
  tests:
    - input: 'count_vowels("hello")'
      expected: 2
    - input: 'count_vowels("world")'
      expected: 1
    - input: 'count_vowels("AEIOU")'
      expected: 5

- title: Merge Two Lists
  difficulty: medium
  description: "Write a function called 'merge_lists' that merges two sorted lists `list1` and `list2` into a single sorted list."
  example: "Example: merge_lists([1, 3, 5], [2, 4, 6]) should return [1, 2, 3, 4, 5, 6]."
  template: "def merge_lists(list1, list2):\n    # Write your code here\n    pass\n"
  solution: |
    def merge_lists(list1, list2):
        return sorted(list1 + list2)
  tests:
    - input: 'merge_lists([1, 3, 5], [2, 4, 6])'
      expected: [1, 2, 3, 4, 5, 6]
    - input: 'merge_lists([], [2, 4, 6])'
      expected: [2, 4, 6]
    - input: 'merge_lists([1, 3, 5], [])'
      expected: [1, 3, 5]

- title: Reverse Words in a Sentence
  difficulty: medium
  description: "Write a function called 'reverse_words' that takes a sentence `s` and returns the sentence with the words reversed."
  example: "Example: reverse_words('hello world') should return 'world hello'."
  template: "def reverse_words(s):\n    # Write your code here\n    pass\n"
  solution: |
    def reverse_words(s):
        return ' '.join(s.split()[::-1])
  tests:
    - input: 'reverse_words("hello world")'
      expected: 'world hello'
    - input: 'reverse_words("The quick brown fox")'
      expected: 'fox brown quick The'
    - input: 'reverse_words("Python is fun")'
      expected: 'fun is Python'
